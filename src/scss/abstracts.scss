// Variables

// Colors
// Light
$color-white: #fff;
// Grey
$color-grey: #eaeaea;
$color-grey-dark: #747474;
$color-grey-bg: #282828;
//Dark
$color-black: #000;
// Orange
$color-orange: #ffc617;
$color-orange-dark: #f8bf15;
// Blue
$color-blue: #1473e6;
$color-blue-dark: #1153a3;
//Red
$color-red: #ce1717;

// Typography
$baseFontSize: 16;

// Media Queries
/*
0 - 600px:       Phone
600px- 900px:    Tablet, Phone portrait
900px - 1200px:  Tablet landscape
1800px + :       Big desktop

$breakpoint arguement choices:
- small-phone
- phone
- tab-port
- tab-land
- big-desktop
*/
@mixin respond($breakpoint) {
    // <420px
    @if $breakpoint == small-phone {
        @media only screen and (max-width: 26.25em) {
            @content;
        }
    }
    //<600px
    @if $breakpoint == phone {
        @media only screen and (max-width: 37.5em) {
            @content;
        }
    }
    //600-900px
    @if $breakpoint == tab-port {
        @media only screen and (max-width: 56.25em) {
            @content;
        }
    }
    //900-1200px
    @if $breakpoint == tab-land {
        @media only screen and (max-width: 75em) {
            @content;
        }
    }
    //>1800px
    @if $breakpoint == big-desktop {
        @media only screen and (min-width: 120em) {
            @content;
        }
    }
}

// Additional mixins and functions
@mixin absCenter {
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

@function rem($pixels, $context: $baseFontSize) {
    @if (unitless($pixels)) {
        $pixels: $pixels * 1px;
    }

    @if (unitless($context)) {
        $context: $context * 1px;
    }

    @return $pixels / $context * 1rem;
}
